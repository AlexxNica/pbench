#! /bin/bash

# pbench-move-results copies tarballs to the server and creates
# symlinks to them in the controller's TODO directory. That signals
# pbench-unpack-tarballs to process them.

# This script simulates what pbench-move-results does with the
# tarballs that it copies from a satellite server. It runs as a cron
# job every night.

# The script rsyncs the archive of pbench tarballs of a satellite
# server to the archive of the internal production server. In the
# process, it renames the local copy of each remote host directory by
# prepending a specified prefix.  That way, hosts associated with the
# satellite are disambiguated and distinguished from every other host
# (internal or from another satellite), as long as the prefixes are
# unique.

# The tarballs are sorted by size and the list is passed to the
# scheduler (pbench-rsync-satellite-process-work-queue), which chops
# down the list into chunks whose total size does not exceed 50MB. The
# scheduler then creates the link in the TODO directory of each host,
# just as if pbench-move-results had moved the tarball here. The
# scheduler waits for the last tarball of the chunk to be finished,
# before submitting the next chunk. In order to make steady progress
# through the list, the scheduler will always submit at least one
# file, so files larger than 50MB are submitted individually. The hope
# is that that will reduce the chance of any breakage in the
# distributed file system where the archive is stored and will limit
# the wait for the processing of any tarballs that are submitted by
# pbench-move-results.

# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac
case $# in
    3)
        :
        ;;
    *)
        echo "Usage: $PROG <prefix> <remotehost> <remotearchive>"
        exit 1
        ;;
esac

prefix=$1
remotehost=$2
remotearchive=$3

shift 3

# TOP, TMP, LOGSDIR, ARCHIVE, TS are all defined in pbench-base.sh
. $dir/pbench-base.sh
if [[ -z "$mail_recipients" ]] ;then
    echo "$PROG: mail_recipients is not defined"
    exit 1
fi

# check if we are running under the unit test regime
if [ "${_PBENCH_SERVER_TEST}" = "1" ] ;then
    # make the names reproducible for unit tests
    tmp=$TMP/$PROG.XXXXX
    # status=status.XXXXX
    # don't submit any tarballs for further processing
    dryrun=--dry-run
else
    tmp=$TMP/$PROG.$$
    # status=status.$$
    dryrun=
fi

typeset -i nprocessed=0
typeset -i nfailed_md5=0

unpack=$tmp/unpack
trap "rm -rf $tmp $unpack" EXIT

mkdir -p $tmp
mkdir -p $unpack

# get the tarball from remote
ssh $remotehost "/opt/pbench-server/bin/pbench-sync-package-tarballs" > $tmp/satellite.tar
rc=$? 
if [[ $rc != 0 ]] ;then
    echo "$PROG: ssh $remotehost /opt/pbench-server/bin/pbench-package-tarballs: failed."
    exit 2
fi

log_init $(basename $0)
logdir=$LOGSDIR/$(basename $0)/$prefix/$TS
mkdir -p $logdir
rc=$?
if [[ $rc != 0 ]] ;then
    echo Failed: mkdir -p $logdir
    exit 2
fi

# unpack the tarball into tmp directory
tar -xvf $tmp/satellite.tar -C $unpack
files=$(find $unpack -path '*.tar.xz' -printf '%P\n')
hosts="$(for host in $files;do echo ${host%%/*};done | sort -u )"

let start_time=$(timestamp-seconds-since-epoch)
echo "$TS: start - $(timestamp)"
let failures=0
for host in $hosts ;do
    localdir=$ARCHIVE/$prefix::$host
    if [ ! -d $localdir ] ;then
        mkdir -p $localdir || exit 1
    fi
    pushd $localdir >/dev/null || exit 2
    if [ ! -d $logdir/$host ] ;then
        mkdir -p $logdir/$host
    fi

    # move the unpacked files from tmp directory to archive
    mv $unpack/$host/{.,}* .
    rc=$?
    if [[ $rc != 0 ]] ;then
        echo "FAILED:    mv $unpack/$host/* ."
        let failures=failures+1
    fi

    # make the state dirs: TODO, TO-INDEX, TO-COPY-SOS etc.
    mk_dirs $prefix::$host

    # check md5s and move md5s to its appropriate state directories according to pass or fail
    md5_list=$(find . -path '*.tar.xz.md5' -printf '%P\n')
    md5sum -c $md5_list > $logdir/$host/md5-checks.log
    grep 'OK' $logdir/$host/md5-checks.log > $logdir/$host/ok-checks.log
    if [ -s $logdir/$host/ok-checks.log ] ;then
        md5_pass=$(cat $logdir/$host/ok-checks.log | sed -n 's/: OK//p')
        for x in $md5_pass; do
            ln -s $x SATELLITE-MD5-PASSED/$x
        done
    fi
    grep 'FAIL' $logdir/$host/md5-checks.log > $logdir/$host/fail-checks.log
    if [ -s $logdir/$host/fail-checks.log ] ;then
        md5_fail=$(cat $logdir/$host/fail-checks.log | sed -n 's/: FAIL//p')
        for x in $md5_fail; do
            ln -s $x SATELLITE-MD5-FAILED/$x
        done
    fi
    # create symlinks for the synced tarballs in TODO
    if [ -s $logdir/$host/ok-checks.log ] ;then
        for x in $md5_pass; do
            ln -s $x TODO/$x
        done
    fi
    # save the contents of ok checks to further use it for state change
    if [ -s $logdir/$host/ok-checks.log ] ;then
        state_list=$(cat $logdir/$host/ok-checks.log | sed -n 's/: OK//p')
        for x in $state_list; do
            echo "$host/TO-SYNC/$x" >> $tmp/change_state.log
        done
    fi 
    popd > /dev/null
done

# change the state of the tarballs on remote
ssh $remotehost "cd $remotearchive; /opt/pbench-server/bin/pbench-satellite-state-change" < $tmp/change_state.log > $logdir/$host/mv.log 2>&1

nprocessed=$(wc -l < $logdir/$host/md5-checks.log)
nfailed_md5=$(wc -l < $logdir/$host/fail-checks.log)

 # ... and mail it
if [ "$nfailed_md5" -gt 0 ]  ;then
    mailx -s \
    "$PROG: $prefix: $nprocessed files processed, with $nfailed_md5 md5 failures"\
    $mail_recipients < $logdir/$host/fail-checks.log
fi

let end_time=$(timestamp-seconds-since-epoch)
let duration=end_time-start_time
echo "$TS: end - $(timestamp)"
echo "$TS: duration (secs): $duration"

exit $failures

