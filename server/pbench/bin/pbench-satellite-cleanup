#! /bin/bash

# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac

# TOP, TMP, LOGSDIR, ARCHIVE, TS are all defined in pbench-base.sh
. $dir/pbench-base.sh
if [[ -z "$mail_recipients" ]] ;then
    echo "$PROG: mail_recipients is not defined"
    exit 1
fi

remotearchive=$ARCHIVE

files=$(cd $remotearchive; find . -path '*/TO-DELETE/*.tar.xz' -printf '%P\n')

# check if we are running under the unit test regime
if [ "${_PBENCH_SERVER_TEST}" = "1" ] ;then
    # make the names reproducible for unit tests
    tmp=$TMP/$PROG.XXXXX
    status=status.XXXXX
    # don't submit any tarballs for further processing
    dryrun=--dry-run
else
    tmp=$TMP/$PROG.$$
    status=status.$$
    dryrun=
fi

trap "rm -rf $tmp" EXIT

mkdir -p "$tmp"

log_init $(basename $0)
logdir=$LOGSDIR/$(basename $0)/$prefix/$TS
mkdir -p "$logdir"
rc=$?
if [[ $rc != 0 ]] ;then
    echo Failed: mkdir -p "$logdir"
    exit 2
fi

hosts="$(for host in $files;do echo ${host%%/*};done | sort -u )"
tarballs=$(for tarball in $files; do echo ${tarball##*/}; done)

for host in $hosts; do
    pushd $remotearchive/$host >/dev/null || exit 2
    for x in $tarballs; do
        # remove tar file
        if [ -s $x ]; then
            rm $x
        fi
        rc=$?
        if [ $rc != 0 ]; then
            echo Failed to remove: $x
        fi
        # remove its md5
        if [ -s $x.md5 ]; then
            rm $x.md5
        fi
        rc=$?
        if [ $rc != 0 ]; then
            echo Failed to remove: $x.md5
        fi
        # change the state to SATELLITE-DONE
        mv TO-DELETE/$x SATELLITE-DONE
        if [ $rc != 0 ]; then
            echo Failed to move $x from TO-DELETE to SATELLITE-DONE
        fi
        # remove from incoming
        if [ -s $INCOMING/$host/${x%%.tar.xz} ]; then
            rm -rf $INCOMING/$host/${x%%.tar.xz}
        fi
        rc=$?
        if [ $rc != 0 ]; then
            echo Failed to remove: $INCOMING/$host/${x%%.tar.xz}
        fi
        # remove from results
        prefix_value=$(cat ".prefix/prefix.${x%%.tar.xz}")
        if [ -L $RESULTS/$host/${x%%.tar.xz} ]; then
            rm $RESULTS/$host/${x%%.tar.xz}
            rc=$?
            if [ $rc != 0 ]; then
                echo Failed to remove: $RESULTS/$host/${x%%.tar.xz}
            fi
        elif [ -L $RESULTS/$host/$prefix_value/${x%%.tar.xz} ]; then
            rm -rf $RESULTS/$host/$prefix_value
            rc=$?
            if [ $rc != 0 ]; then
                echo Failed to remove: $RESULTS/$host/$prefix_value/${x%%.tar.xz}
            fi
        fi
        # remove prefix if present
        prefix=".prefix/prefix.${x%%.tar.xz}"
        if [ -s $prefix ]; then
            rm $prefix
        fi
        rc=$?
        if [ $rc != 0 ]; then
            echo Failed to remove: $prefix
        fi
    done
    popd > /dev/null
done

